#! /bin/bash
# fork of htpps://github.com/jcgoble3/gitstuff
# this adds git info to bashrc when in a git repo

# get current branch
git_branch() {
	# print current branch, output errors to null (in case of not in git repo)
	git symbolic-ref --short HEAD 2>/dev/null
}

# get branch state in simple output (--porcelain)
git_status() {
    # + changes are staged and ready to commit
    # ! unstaged changes are present
    # ? untracked files are present
    # S changes have been stashed
    # P local commits need to be pushed to the remote
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output+"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output!"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output?"
    [[ -n $(git stash list) ]] && output="${output}S"
    [[ -n $(git log --branches --not --remotes) ]] && output="${output}P"
    [[ -n $output ]] && output="|$output"  # separate from branch name
    echo $output
}

git_color() {
    # Receives output of git_status as argument; produces appropriate color
    # code based on status of working directory:
    # - White if everything is clean
    # - Green if all changes are staged
    # - Red if there are uncommitted changes with nothing staged
    # - Yellow if there are both staged and unstaged changes
    # - Blue if there are unpushed commits
    local staged=$([[ $1 =~ \+ ]] && echo yes)
    local dirty=$([[ $1 =~ [!\?] ]] && echo yes)
    local needs_push=$([[ $1 =~ P ]] && echo yes)
    if [[ -n $staged ]] && [[ -n $dirty ]]; then
        echo -e '\033[33m'  # yellow
		elif [[ -n $staged ]]; then
			echo -e '\033[32m'  # green
		elif [[ -n $dirty ]]; then
			echo -e '\033[31m'  # red
		elif [[ -n $needs_push ]]; then
			echo -e '\033[34m' # blue
		else
        echo -e '\033[37m'  # white
    fi
}

git_prompt() {
    # First, get the branch name...
    local branch=$(git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        local state=$(git_status)
        local color=$(git_color $state)
        # Now output the actual code to insert the branch and status
		echo -e "\001$color\002\001\033[03m\002\001(\002$branch$state\001)\002\001\033[00m\002"  # last bit resets color
    fi
}
